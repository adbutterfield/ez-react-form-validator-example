{"version":3,"sources":["warning.tsx","input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Warning","message","hasError","className","clsx","Input","onChange","onBlur","value","field","name","showError","htmlFor","id","data-testid","errors","formSetup","requiredField","required","defaultValueField","defaultValue","customErrorField","errorMessages","minLengthField","minLength","maxLengthField","maxLength","minField","min","maxField","max","selectField","radioField","checkboxField","App","useFormValidator","fields","isValid","values","handleChange","handleBlur","setValues","setupComplete","validate","reset","useEffect","console","log","String","type","checked","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2b333677.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport './warning.css';\n\nconst Warning: React.FC<{ message: string; hasError: boolean }> = ({ message, hasError }) => {\n  return (\n    <div className=\"Warning\">\n      <p className={clsx('Warning__message', hasError && 'shouldShow')}>{message}</p>\n    </div>\n  );\n};\n\nexport default Warning;\n","import React from 'react';\nimport clsx from 'clsx';\nimport Warning from './warning';\nimport './input.css';\nimport { Field } from 'ez-react-form-validator';\n\ntype InputProps = {\n  onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n  onBlur: (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n  value: any;\n  field: Field;\n  name: any;\n};\n\nconst Input: React.FC<InputProps> = ({ onChange, onBlur, value, field, name }) => {\n  return (\n    <div className=\"Input\">\n      <div className={clsx('field success', field.showError && 'error')}>\n        <label htmlFor={name}>{name}</label>\n        <input id={name} name={name} value={value} onChange={onChange} onBlur={onBlur} />\n      </div>\n      {field.showError && (\n        <p className=\"Input__error\" data-testid={`${name}-error`}>\n          Error message: {field.errors[0]}\n        </p>\n      )}\n      <Warning\n        message={`${name} ${field.hasError ? 'has an error' : 'does not have an error'}${field.hasError ? (field.showError ? ', and we should' : ', but we should not') : ''} ${\n          field.hasError ? 'display the error' : ''\n        }`}\n        hasError={field.hasError}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport useFormValidator, { ValidatorSetup } from 'ez-react-form-validator';\nimport './App.css';\nimport Warning from './warning';\nimport Input from './input';\n\ntype FormFields = {\n  requiredField: string;\n  defaultValueField: string;\n  customErrorField: string;\n  minLengthField: string;\n  maxLengthField: string;\n  minField: number;\n  maxField: number;\n  selectField: number;\n  radioField: string;\n  checkboxField: string;\n};\n\nconst formSetup: ValidatorSetup<FormFields> = {\n  requiredField: {\n    required: true,\n  },\n  defaultValueField: {\n    defaultValue: 'default',\n  },\n  customErrorField: {\n    required: true,\n    errorMessages: {\n      required: 'custom error message',\n    },\n  },\n  minLengthField: {\n    minLength: 4,\n  },\n  maxLengthField: {\n    maxLength: 4,\n  },\n  minField: {\n    min: 4,\n  },\n  maxField: {\n    max: 4,\n  },\n  selectField: {\n    required: true,\n  },\n  radioField: {\n    required: true,\n  },\n  checkboxField: {\n    required: true,\n  },\n};\n\nfunction App() {\n  const { fields, isValid, values, handleChange, handleBlur, setValues, setupComplete, validate, reset } = useFormValidator(formSetup);\n\n  useEffect(() => {\n    console.log(fields);\n  }, [fields]);\n\n  const setDefaults = () => {\n    setValues({\n      requiredField: 'a',\n      defaultValueField: 'a',\n      customErrorField: 'a',\n      minLengthField: 'aaaa',\n      maxLengthField: 'aaaa',\n      minField: 4,\n      maxField: 4,\n      selectField: 1,\n      checkboxField: 'checkbox',\n      radioField: 'radio',\n    });\n  };\n\n  return (\n    <div className=\"Layout\">\n      <h1>Example form using EZ React Form Validator</h1>\n      {setupComplete && (\n        <form className=\"ui form\">\n          <p>Form setup is complete: {String(setupComplete)}</p>\n          <Input name=\"requiredField\" onBlur={handleBlur} onChange={handleChange} field={fields.requiredField} value={values.requiredField} />\n          <Input name=\"defaultValueField\" onBlur={handleBlur} onChange={handleChange} field={fields.defaultValueField} value={values.defaultValueField} />\n          <Input name=\"customErrorField\" onBlur={handleBlur} onChange={handleChange} field={fields.customErrorField} value={values.customErrorField} />\n          <Input name=\"minLengthField\" onBlur={handleBlur} onChange={handleChange} field={fields.minLengthField} value={values.minLengthField} />\n          <Input name=\"maxLengthField\" onBlur={handleBlur} onChange={handleChange} field={fields.maxLengthField} value={values.maxLengthField} />\n          <Input name=\"minField\" onBlur={handleBlur} onChange={handleChange} field={fields.minField} value={values.minField} />\n          <Input name=\"maxField\" onBlur={handleBlur} onChange={handleChange} field={fields.maxField} value={values.maxField} />\n\n          <div className={clsx('field', fields.selectField?.showError && 'error')}>\n            <label>Select Field</label>\n            <select className=\"ui dropdown\" name=\"selectField\" value={values.selectField || ''} onChange={handleChange} onBlur={handleBlur}>\n              <option value=\"\">Select</option>\n              <option value=\"1\">One</option>\n              <option value=\"2\">Two</option>\n            </select>\n          </div>\n          {fields.selectField?.showError && (\n            <p className=\"Input__error\" data-testid=\"selectField-error\">\n              Error message: {fields.selectField.errors[0]}\n            </p>\n          )}\n          <Warning\n            message={`selectField ${fields.selectField?.hasError ? 'has an error' : 'does not have an error'}${\n              fields.selectField?.hasError ? (fields.selectField?.showError ? ', and we should' : ', but we should not') : ''\n            } ${fields.selectField?.hasError ? 'display the error' : ''}`}\n            hasError={fields.selectField?.hasError}\n          />\n\n          <div className={clsx('inline field', fields.checkboxField?.showError && 'error')}>\n            <div className=\"ui checkbox\">\n              <input\n                type=\"checkbox\"\n                id=\"checkboxField\"\n                name=\"checkboxField\"\n                value=\"checkbox\"\n                checked={values.checkboxField === 'checkbox'}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <label htmlFor=\"checkboxField\">Checkbox Field</label>\n            </div>\n          </div>\n          {fields.checkboxField?.showError && (\n            <p className=\"Input__error\" data-testid=\"checkboxField-error\">\n              Error message: {fields.checkboxField.errors[0]}\n            </p>\n          )}\n          <Warning\n            message={`checkboxField ${fields.checkboxField?.hasError ? 'has an error' : 'does not have an error'}${\n              fields.checkboxField?.hasError ? (fields.checkboxField?.showError ? ', and we should' : ', but we should not') : ''\n            } ${fields.checkboxField?.hasError ? 'display the error' : ''}`}\n            hasError={fields.checkboxField?.hasError}\n          />\n\n          <div className={clsx('inline field', fields.checkboxField?.showError && 'error')}>\n            <div className={clsx('ui radio checkbox', fields.radioField?.showError && 'error')}>\n              <input type=\"radio\" id=\"radioField\" name=\"radioField\" value=\"radio\" checked={values.radioField === 'radio'} onChange={handleChange} onBlur={handleBlur} />\n              <label htmlFor=\"radioField\">Radio Field</label>\n            </div>\n          </div>\n          {fields.radioField?.showError && (\n            <p className=\"Input__error\" data-testid=\"radioField-error\">\n              Error message: {fields.radioField.errors[0]}\n            </p>\n          )}\n          <Warning\n            message={`radioField ${fields.radioField?.hasError ? 'has an error' : 'does not have an error'}${\n              fields.radioField?.hasError ? (fields.radioField?.showError ? ', and we should' : ', but we should not') : ''\n            } ${fields.radioField?.hasError ? 'display the error' : ''}`}\n            hasError={fields.radioField?.hasError}\n          />\n        </form>\n      )}\n      <p>All fields are valid: {String(isValid)}</p>\n      <button className=\"ui button\" type=\"button\" onClick={setDefaults}>\n        Set Defaults\n      </button>\n      <button className=\"ui button\" type=\"button\" onClick={validate}>\n        Validate\n      </button>\n      <button className=\"ui button\" type=\"button\" onClick={reset}>\n        Reset\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}